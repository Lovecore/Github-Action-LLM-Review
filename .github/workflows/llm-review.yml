name: LLM Code Review

on:
  pull_request:
    branches: [ main, master ] # Adjust to your main branch name

permissions:
  contents: read # Allows checkout of the repository

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history to allow diffing against base branch

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # You can choose your preferred Python version

      - name: Install Dependencies
        run: pip install requests

      - name: Generate Diff
        id: git_diff
        run: |
          echo "Fetching base branch ${{ github.event.pull_request.base.ref }}..."
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
          echo "Generating diff between HEAD and ${{ github.event.pull_request.base.sha }}..."
          # The command below generates a diff and stores it in changes.diff
          # It also handles the case where the diff might be empty
          git diff --no-prefix "origin/${{ github.event.pull_request.base.ref }}" ${{ github.sha }} > changes.diff || echo "No changes found or diff command failed."
          
          # Output the diff file name for the next step
          echo "diff_file=changes.diff" >> $GITHUB_OUTPUT
          
          echo "Diff generated:"
          cat changes.diff


      - name: Analyze Changed Python Files
        id: analyze_py_files
        run: |
          set -e
          echo "Finding changed Python files in the PR..."
          git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.sha }} | grep '\.py$' > changed_py_files.txt || true
          if [ ! -s changed_py_files.txt ]; then
            echo "No Python files changed. Skipping analysis."
            exit 0
          fi
          while IFS= read -r file; do
            echo "Analyzing $file..."
            # Replace / with _ for the output filename
            safe_file_name=$(echo "$file" | tr '/' '_')
            python .github/scripts/get_llm_review.py "$file" "llm_review_${safe_file_name}.md"
          done < changed_py_files.txt
        env:
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_ENDPOINT: ${{ vars.LLM_ENDPOINT }}
          LLM_MODEL_NAME: ${{ vars.LLM_MODEL_NAME }}

      - name: Upload Review Documents
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: llm-code-review-report
          path: llm_review_*.md
